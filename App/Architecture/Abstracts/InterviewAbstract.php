<?php

namespace App\Architecture\Abstracts;

use App\Architecture\Interfaces\InterviewInterface;

/**
 * We extend the contract for all the concrete classes.
 */
abstract class InterviewAbstract extends PromptStrategyAbstract implements InterviewInterface
{
    /**
     * @var string
     */
    public $pattern;

    /**
     * @var array
     */
    public $credits = [
      'file' => '%s Design Pattern - %s',
      'generated' => 'This file is auto-generated by Shubaka from @edouardkombo.',
      'author' => '@author Edouard Kombo <edouard.kombo@gmail.com>',
    ];

    /**
     * @var array
     */
    public $generatorBag = [];

    public function __construct(string $namepsace)
    {
        $ns = explode('\\', $namepsace);
        $this->pattern = end($ns);

        $this->credits['file'] = sprintf($this->credits['file'], $this->pattern, '%s');

        parent::__construct($this->pattern);
    }

    public function prompt(): self
    {
        $this->orchestrate();

        return $this;
    }

    abstract public function design();

    public function report()
    {
        foreach ($this->generatorBag as $path => $fileEntries) {
            //Create folder
            mkdir(str_replace('\\', '/', $path), 0777, true);
            echo "---> Creating folder related to $path inside ".__DIR__.str_replace('\\', '/', $path)."\n";

            foreach ($fileEntries as $key => $file) {
                foreach ($file as $fileName => $content) {
                    //Create files
                    file_put_contents(str_replace('\\', '/', $path.'/'.$fileName).'.php', $content);
                    echo "---> Writing content related to $fileName inside ".__DIR__.str_replace('\\', '/', $path.'/'.$fileName)."\n";
                }
            }
        }
    }
}
